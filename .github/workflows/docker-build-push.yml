#!/bin/bash

name: Docker Build and Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mi-repositorio-devops:${{ github.sha }}
          build-args: |
            BUILD_DATE=${{ github.event.inputs.build_date }}
            VCS_REF=${{ github.sha }}

      - name: Deploy to EC2 via SSM
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Describe EC2 Instance
        run: |
          aws ec2 describe-instances --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" --output text

      - name: Send SSM command to EC2
        id: send-command
        run: |
          COMMANDS='[
            "docker stop mi-repositorio-devops-app || true",
            "docker rm mi-repositorio-devops-app || true",
            "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mi-repositorio-devops:${{ github.sha }}",
            "docker run -d -p 5000:5000 --name mi-repositorio-devops-app ${{ secrets.DOCKERHUB_USERNAME }}/mi-repositorio-devops:${{ github.sha }}"
          ]'
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "{\"commands\": ${COMMANDS}}" \
            --output text \
            --query "Command.CommandId")
          echo "SSM Command ID: $COMMAND_ID"
          echo "command-id=$COMMAND_ID" >> $GITHUB_OUTPUT
          
      - name: Wait for SSM command to complete
        run: |
          aws ssm wait command-executed --command-id "${{ steps.send-command.outputs.command-id }}" --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

      - name: Get SSM command output
        run: |
          OUTPUT=$(aws ssm get-command-invocation --command-id "${{ steps.send-command.outputs.command-id }}" --instance-id "${{ secrets.EC2_INSTANCE_ID }}" --output text)
          echo "SSM Command Output:"
          echo "$OUTPUT"